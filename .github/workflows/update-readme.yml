name: Fetch GitHub Activities

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 * * * *'  # This will run the workflow every hour (adjust as necessary)

jobs:
  fetch-activities:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Fetch Recent GitHub Activities
      id: get-activities
      uses: actions/github-script@v6
      with:
        script: |
          const username = 'gjrahul1';  // Replace with your GitHub username
          const perPage = 5;  // Number of events to fetch

          try {
            // Use github.request() to call the GitHub API with the provided token
            const { data: events } = await github.request('GET /users/{username}/events/public', {
              username: username,
              headers: {
                authorization: `token ${process.env.README_WORKFLOW_DISPLAY}`  // Use the secret token
              }
            });

            const activities = events.map(event => {
              const repo = event.repo.name;
              const url = `https://github.com/${repo}`;
              let action;

              // Focus on push, update, and merge actions
              if (event.type === 'PushEvent') {
                action = 'pushed to';
              } else if (event.type === 'PullRequestEvent' && event.payload.action === 'merged') {
                action = 'merged into';
              } else {
                action = 'updated in';  // For other updates like PRs opened, issues, etc.
              }

              // Escape parentheses to avoid syntax issues
              const safeRepoUrl = url.replace(/[()]/g, '\\$&');
              return `- ${action} [${repo}](${safeRepoUrl})`;
            }).join('\n');

            return activities;
          } catch (error) {
            core.setFailed(`Error fetching activities: ${error.message}`);
            return '';
          }

    - name: Log Activities
      run: |
        activities="${{ steps.get-activities.outputs.result }}"
        echo "Fetched Activities: $activities"

    - name: Check if Activities Exist
      run: |
        activities="${{ steps.get-activities.outputs.result }}"
        if [ -z "$activities" ]; then
          echo "No activities found."
        else
          echo "Recent Activities:"
          echo "$activities"
        fi
      env:
        README_WORKFLOW_DISPLAY: ${{ secrets.ReadMe_WorkFlow_Display }}  # Reference the secret here
